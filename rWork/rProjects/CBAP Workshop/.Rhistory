data(women)
women
plot(women)
#vectors
rollno=c(101,102,103,104,105)
rollno
pie(rollno)
rollno[1]
rollno[1-3]
rollno[1:3]
rollno[c(1,3,5)]
sname=c('Akshaya','Dhruv','Ravi','Tadasa','Utsav')
sname
marks=c(89,13,43,75,24)
spl=c('MA','BA','MA','BA','BA')
spl
data(women)
weight
women.weight
(sname=c('Akshaya','Dhruv','Ravi','Tadasa','Utsav'))
marks=c(89,13,43,75.6,24)
marks= rnorm(5, mean = 60, sd=12)
marks= rnorm(100, mean = 60, sd=12)
plot(marks)
plot(marks)
histspl=c('MA','BA','MA','BA','BA')
plot(marks)
hist(marks)
plot(density(marks))
?hist
marks= rnorm(5, mean = 60, sd=12)
spl = sample(c('MA','BA'),5)
spl = sample(c('MA','BA'),5, replace = T)
?sample
spl = sample(c('MA','BA'),5, replace = T, prob=c(.3,.7))
spl = sample(c('MA','BA'),5, replace = T, prob=c(.3,.7))
?sample
spl = sample(c('MA','BA'),5, replace = T, prob=c(.3,.7))
spl = sample(c('MA','BA'),5, replace = T, prob=c(.3,.7))
spl = sample(c('MA','BA'),5, replace = T, prob=c(.3,.7))
spl = sample(c('MA','BA'),5, replace = T, prob=c(.3,.7))
spl1 = sample(c('MA','BA'),100, replace = T, prob=c(.3,.7))
spl2 = sample(c('MA','BA'),100, replace = T, prob=c(.3,.7))
?remove
remove(spl)
remove(spl2)
spl = sample(c('MA','BA'),5, replace = T, prob=c(.3,.7))
remove(spl1)
ls
ls()
ls()
#dataframe
classdata = data.frame(rollno,sname,marks,spl)
classdata
write.csv(classdata, 'classdata.csv')
marks= round(rnorm(5, mean = 60, sd=12),2)
#dataframe
classdata = data.frame(rollno,sname,marks,spl)
write.csv(classdata, 'classdata.csv')
str(df)
str(classdata)
str(classdata$sname)
classdata$sname = as.character(classdata$sname)
(classdata$sname = as.character(classdata$sname))
(classdata$spl = as.character(classdata$spl))
(grades = factor(c('A','B','C','A','B'),ordered=T,levels=c('B','A','C')))
summary(classdata)
classdata$grades = grades
summary(classdata)
write.csv(classdata, 'classdata.csv')
install.packages("swirl")
demo("graphics")
data()
sales1 = read.csv("denco.csv")
sales1 = read.csv("denco.csv")
sales1
head(sales1)
install.packages("swirl")
summary(sales1)
str(sales1)
sales1$revenue = as.numeric(sales$revenue)
sales1$revenue = as.numeric(sales1$revenue)
sales1$REVENUE = as.numeric(sales1$REVENUE)
sales1$COST = as.numeric(sales1$COST)
sales1$MARGIN = as.numeric(sales1$MARGIN)
str(sales1)
unique(sales$CUSTNAME)
unique(sales1$CUSTNAME)
length(unique(sales1$CUSTNAME))
length(unique(sales1$REGION))
df1 = aggregate(sales1$REVENUE, by=list(sales$CUSTNAME), FUN=sum)
df1 = aggregate(sales1$REVENUE, by=list(sales1$CUSTNAME), FUN=sum)
head(df1)
df1[order(df1$x, decreasing=T)]
df1[order(df1$x, decreasing=TRUE)]
df1[order(df1$x, decreasing=TRUE),]
head(df1[order(df1$x, decreasing=TRUE),])
View(sales1)
View(sales1)
remove(sales1)
sales1 = read.csv("denco.csv")
sales1$REVENUE = as.numeric(sales1$REVENUE)
sales1$COST = as.numeric(sales1$COST)
sales1$MARGIN = as.numeric(sales1$MARGIN)
length(unique(sales1$REGION))
df1 = aggregate(sales1$REVENUE, by=list(sales1$CUSTNAME), FUN=sum)
head(df1[order(df1$x, decreasing=TRUE),])
head(df1[order(df1$x, decreasing=TRUE),],5)
head(df1)
head(df1order,5)
df1order=df1[order(df1$x, decreasing=TRUE),]
head(df1order,5)
df2 = aggregate(revenue ~ custname, data=sames1, FUN=sum)
df2 = aggregate(revenue ~ custname, data=sales1, FUN=sum)
df2 = aggregate(REVENUE ~ CUSTNAME, data=sales1, FUN=sum)
head(df2)
head(df2[order(df2$REVENUE, decreasing=TRUE),],5)
df3 = aggregate(REVENUE ~ CUSTNAME+REGION, data=sales1, FUN=sum)
head(df3)
head(df3[order(df3$REVENUE, decreasing=TRUE),],5)
list1 = tapply(sales$REVENUE, sales$CUSTNAME, FUN=sum)
list1 = tapply(sales1$REVENUE, sales1$CUSTNAME, FUN=sum)
list1
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
sales1%>%dplyr::filter(MARGIN>1000000)
install.packages("sqldf")
sales1%>%group_by(CUSTNAME)%>%summarize(REVENUE = sum(REVENUE))%>%arrange(desc(REVENUE))
library(sqldef)
library(sqldf)
install.packages("sqldf")
library(sqldf)
library(dplyr)
glimpse(iris)
glimpse(mtcars)
str(iris)
view(iris)
view(iris)
mtcars['mpg']
mtcars%>%select(vs,mpg,wt)
mtcars%>%dplyr::select(vs,mpg,wt)
mtcars%>%group_by(cyl)%>% summarize(avgwt = mean(wt), meanhp = mean(hp)),%>% arrange(desc(meanhp), avgwt)
mtcars%>%group_by(cyl)%>% summarize(avgwt = mean(wt), meanhp = mean(hp)) %>% arrange(desc(meanhp), avgwt)
mtcars %>% filter(mpg>23|wt<2)
install.packages("gsheet")
library(gsheet)
area1 = "https://docs.google.com/spreadsheets/d/1qLHa5qFTyWacta8F-IGo6J3Zpf-BVR9OrlqONuJDqYc/edit#gid=2051155174"
df2 = as.data.frame(gsheet::gsheet2tb1(area1))
library(gsheet)
area1 = "https://docs.google.com/spreadsheets/d/1qLHa5qFTyWacta8F-IGo6J3Zpf-BVR9OrlqONuJDqYc/edit#gid=2023826519"
df2 = as.data.frame(gsheet::gsheet2tb1(area1))
library(gsheet)
install.packages("gsheet")
install.packages("gsheet")
install.packages("gsheet")
install.packages("gsheet")
install.packages("gsheet")
df3 = read.csv('./data/salesslr.csv')
df3 = read.csv('salesslr.csv')
head(df3)
cov(df3$X,df3$Y)
cor(df3$X,df3$Y)
cor.test(df3$X,df3$Y)
plot(df3)
plot(X,Y,xlab = 'Area in sqft',ylab = 'Sales Amount', type = 'p', main = 'Plot of Area vs Sales')
plot(df3$X,df3$Y,xlab = 'Area in sqft',ylab = 'Sales Amount', type = 'p', main = 'Plot of Area vs Sales')
fit1=lm(formula = Y~X, df3)
fit1
summary(fit1)
(Y=0.9645 + 1.6699*4)
fitted(fit1)
new1 = data.frame(X=c(1.5,2,3,4,5))
new1
predict(fit1, newdata = new1)
summary(fit1)
data(women)
cor(women)
cor(women$height,women$weight)
df3 = read.csv('salesmlr.csv')
df4 = read.csv('salesmlr.csv')
df3 = read.csv('salesslr.csv')
df4 = read.csv('salesmlr.csv')
head(df4)
remove(df4$X)
str omni
str(omni)
str(df4)
omni=data.frame(df4$Sales,df4$Price,df4$Promotion)
head(omni)
mlrmodel1 = lm(formula = df4.Sales ~ df4.Price + df4.Promotion )
mlrmodel1 = lm(formula = omni$df4.Sales ~ omni$df4.Price + omni$df4.Promotion )
summary(mlrmodel1)
ndata1 = data.frame(price = c(60,70), promotion = c(300,400))
predict(mlrmodel1, newdata = ndata1, predict = 'response')
ndata1 = data.frame(price = c(60,70), promotion = c(300,400))
predict(mlrmodel1, newdata = ndata1, predict = 'response')
predict(mlrmodel1, newdata = ndata1)
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
install.packages("rattle")
version()
R.version()
R.Version()
install.packages(c("DBI", "MASS", "Matrix", "RCurl", "RSQLite", "Rcpp", "XML", "bindr", "bindrcpp", "bit", "blob", "cluster", "curl", "dplyr", "foreign", "ggplot2", "glue", "gsubfn", "mgcv", "munsell", "nlme", "pillar", "plogr", "purrr", "rlang", "rpart", "rpart.plot", "stringi", "stringr", "survival", "tidyr", "utf8", "withr"))
update.packages()
#control+enter when you are in the line to execute
#
# Vectors-----
(x=1:10)
(x=c(1,2,3,4,5))
(x=letters[1:10])
(x=c(T,F,T,T))
#access elements
(x = seq(0,10,by=2))
#[1]  0  2  4  6  8 10
x[3]  # access 3rd element
#[1] 4
x[c(2, 4)]     # access 2nd and 4th element
#[1] 2 6
x[-1]          # access all but 1st element
#[1]  2  4  6  8 10
x[c(2, -4)]    # cannot mix positive and negative integers
#Error in x[c(2, -4)] : only 0's may be mixed with negative subscripts
x[c(2.4, 3.54)]    # real numbers are truncated to integers
#modify
(x = -3:2)
#[1] -3 -2 -1  0  1  2
x[2] <- 0; x        # modify 2nd element
#[1] -3  0 -1  0  1  2
x[x<0] = 5; x   # modify elements less than 0
#[1] 5 0 5 0 1 2
x = x[1:4]; x      # truncate x to first 4 elements
#delete vector
(x = seq(1,5, length.out = 10))
#[1] 1.000 1.444 1.889 2.333 2.778 3.222 3.667 4.111 4.556 5.000
x = NULL
x
#NULL
x[4]
#Matrix-----
(m1 = matrix(1:12, nrow=4))
(m2 = matrix(1:12, ncol=3, byrow=T))
class(m1)
#[1] "matrix"
attributes(m1)
#$dim
#[1] 4 3
dim(m1)
#names of cols and rows
m1
(colnames(m1) = paste('C',1:3, sep=''))
(rownames(m1) = paste('R',1:4, sep=''))
m1
#Vector to Matrix
(m3 = 1:24)
dim(m3)= c(6,4)
m3
#access elements
m2
m2[1,]  #first row
m2[c(1,3,4),]  #1st,3rd,4th row
m2[,1]  #first col
m2[,2:3] # 2nd to 3rd coln
m2[c(1,2),c(2,3)]
m2[,]
m2[-2,] # exclude 2nd row
m2[1:5] # matrix is like vector
m2[c(TRUE,FALSE),c(2,3)] #logical indexing
m2[m2 > 5]
#modify Vector
m2[2,2]
m2[2,2] = 10
m2
m2[m2> 10] = 99
m2
rbind(m2, c(50,60,70))
cbind(m2, c(55,65,75,85))
#row and col wise summary
m1
colSums(m1); rowSums(m1)
colMeans(m1); rowMeans(m1)
t(m1) # transpose
m1
sweep(m1, MARGIN = 1, STATS = c(2,3,4,5), FUN="+" ) #rowise
sweep(m1, MARGIN = 2, STATS = c(2,3,4), FUN="*" ) #colwise
#addmargins
m1
addmargins(m1,1,sum) #colwise function
addmargins(m1,2,mean) #rowwise function
addmargins(m1,c(1,2),mean) #row & col wise function
addmargins(m1,c(1,2),list(list(mean,sum), list(var,sd))) #row & col wise function
#Array-----
length(100:123)
4*3*2
#2 coys, 3 products, 4 locations sold qty
(a1 = array(100:123, dim=c(4,3,2)))
(loc = paste('loc', 1:4,sep='-'))
(product = paste('p', 1:3,sep='@'))
(coy = paste('coy', 1:2,sep='%'))
dimnames(a1) = list(loc, product, coy)
a1
apply(a1,1, sum) #locationwise
apply(a1,2, sum) #productwise
apply(a1,c(1,2), sum) #product-location wise
apply(a1,c(2,3), sum) #product-coy wise
apply(a1,c(1,3), sum) #coy-location
apply(a1,3, sum) #coywise
sum(a1) #total
#DataFrame----
#create Vectors to be combined into DF
(rollno = 1:30)
(sname = paste('student',1:30,sep=''))
(gender = sample(c('M','F'), size=30, replace=T, prob=c(.7,.3)))
(marks = floor(rnorm(30, 50,10)))
(marks2 = ceiling(rnorm(30,40,5)))
(course = sample(c('BBA','MBA'), size=30, replace=T, prob=c(.5,.5)))
#create DF
df1= data.frame(rollno, sname, gender, marks, marks2, course)
str(df1) #structure of DF
head(df1) #top 6 rows
head(df1,n=3) #top 3 rows
tail(df1) #last 6 rows
class(df1) # DF
summary(df1) #summary
df1  #full data
df1$gender  # one column
df1[ , c(2,4)] #multiple columns
df1[1:10 ,] #select rows, all columns
#as per conditionis
df1[ marks > 50 & gender=='F', c('rollno', 'sname')]
df1[ marks > 50 & gender=='F', c(1,2)]
df1[ marks > 50 | gender=='F', ]
names(df1)  # names of columns
dim(df1)  #Dimensions
aggregate(df1$marks, by=list(df1$gender), FUN=max)
(df2 = aggregate(cbind(marks,marks2) ~ gender + course, data=df1, FUN=max))
#plot
?women
plot(women, type='p', pch=17)
plot(women, type='l')
plot(women, type='b', pch=18, lty=2, col=2)
plot(women, xlim=c(30,100), ylim=c(min(women$weight)-10, 200), pch=10)
#plot
women
#more features with plot
plot(x=women$weight, y=women$height, pch=15, xlab='Weight', ylab='Height', col='red', cex=2, type='b')
title(main='Main Title', sub='Sub Title')
plot(women, type='b', pch=18, lty=2, col=2)
#more features with plot
plot(x=women$weight, y=women$height, pch=15, xlab='Weight', ylab='Height', col='red', cex=2, type='b')
title(main='Main Title', sub='Sub Title')
plot(women)
abline(lm(women$weight ~ women$height), col='red', lty=2, lwd=4)
#boxplot
boxplot(women$height)
abline(h=c(58, 62,65,68,72))
#draw lines on plot for number summary
summary(women)
quantile(women$height)
boxplot(women$height, col='green')
abline(h=quantile(women$height))
#histogram
hist(women$height)
hist(women$height, breaks=10)
hist(women$height, breaks=5, col=1:5)
#histogram2
x = rnorm(100,50,100)
hist(x)
hist(x, freq=F, col=1:5)
pairs(mtcars)
corrgram(mtcars)
corrgram(mtcars)
install.packages("corrgram")
iris
?iris
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
library(rpart)
update.packages()
library(rpart.plot)
str(iris)
head(iris)
summary(iris)
sample(iris)
library(dplyr)
sample_n(iris,3)
sample_frac(iris,.2)
set.seed(1234)
R.Version()
update.packages()
update.packages()
install.packages("rattle")
update.packages()
#Load Libraries
library(rpart)  #does only binary splits; CART
library(rpart.plot)
#DataSet
str(iris)
head(iris)
# Classification Tree
summary(iris)
set.seed(1234)
#Predict Species
ctree = rpart(Species ~ ., method='class', data=iris)
ctree
rpart.plot(ctree, main='Classification Tree', nn=T, type=4, extra=104)
printcp(ctree)
ctreeprune = prune(ctree, cp=0.44)
ctreeprune
rpart.plot(ctreeprune, main='Classification Tree', nn=T, type=4, extra=104)
# Regression Tree - Predict Continuous Value Length
#Predict Sepal.Length
rtree = rpart(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species, method="anova", data=iris )
rtree
rpart.plot(rtree, main='Regression Tree', nn=T, type=2, cex=1)
#another way to plot
plot(rtree, uniform=TRUE, main="Regression Tree for Sepal Length")
text(rtree, use.n=TRUE, cex = 1)
#CP
printcp(rtree)
rsq.rpart(rtree)  #r2 on anova only
rtreeprune = prune(rtree, cp=0.023)
rpart.plot(rtreeprune, main='Pruned Regression Tree', nn=T, type=2, cex=1)
#Predict : Class  : Category of Flower
str(iris)
testData1  = data.frame ( Sepal.Length = 5, Sepal.Width = 4, Petal.Length =1.2, Petal.Width=0.3)
loanapproved = sample(x=c('Yes','No'),size=50,replace=T)
age=runif(50,30,60)
house = sample(x=c('Yes','No'),size=50,replace=T,prob=c(0.3,0.7))
job=sample(x=c('Yes','No'),size=50,replace=T,prob=c(0.6,0.4))
credit = ceiling(rnorm(50,100,10))
loan = data.frame(loanapproved,age,job,house,credit)
head(loan)
table(loan$loanapproved)
loan_tree = rpart(loanapproved ~ .,data=loan,methos='class',control(minsplit=5,cp=.09))
loan_tree = rpart(loanapproved ~ .,data=loan,method='class',control=rpart.control(minsplit=5,cp=.09))
rpart.plot(loan_tree)
loan_tree = rpart(loanapproved ~ .,data=loan,method='class',control=rpart.control(minsplit=5,cp=-1))
rpart.plot(loan_tree)
head(iris)
irisFeatures = iris[-5]
irisFeatures = iris[-5]
head(irisFeatures)
iriskm1 = kmeans(irisFeatures,centers=3)
iriskm1$size
iriskm1$cluster
plot(irisFeatures$Sepal.Length,col=iriskm1$cluster)
iriskm1$centers
plot(irisFeatures$Sepal.Length,col=iriskm1$cluster)
plot(irisFeatures$Sepal.Length,col=iriskm1$cluster)
plot(irisFeatures$Sepal.Length,col=1:3)
iriskm1$centers
plot(irisFeatures$Sepal.Length,col=iriskm1$cluster)
iriskm1$centers
plot(irisFeatures$Sepal.Length,col=1:3)
plot(irisFeatures$Sepal.Length,col=iriskm1$cluster)
iriskm1$centers
library(NbClust)
install.packages("NbClust")
library(NbClust)
